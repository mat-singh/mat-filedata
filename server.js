 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
const request = require('request')
    , assert = require('assert')
    , multer = require('multer');
const upload = multer({ dest: 'uploads/' });
var collection;

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });


app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    });

app.post('/get-file-size', upload.single('file'), function (req, res, next) {
    // req.body will hold the text fields, if there were any 
  console.log('Size: ', req.file.size);
  console.log('destination: ', req.file.destination);
  console.log('path: ', req.file.path);
  var sObj = {file_size: req.file.size};
  res.send(sObj)
})


app.route('/play')    // Use this route to test something
    .get(function(req, res) {
      res.send('Nothing to test');
    });

app.use(function(req, res, next){
  res.status(404);
  // res.type('txt').send('Incorrect usage of the API');
  var sObj = {};
  sObj.error = 'Incorrect usage of the API';
  res.send(sObj);
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

